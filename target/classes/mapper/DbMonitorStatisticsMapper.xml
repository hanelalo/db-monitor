<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.github.starter.dbmonitor.repository.DbMonitorStatisticsRepository">
    
    <!-- 基础结果映射 -->
    <resultMap id="BaseResultMap" type="com.github.starter.dbmonitor.entity.DbMonitorStatistics">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="data_source_name" property="dataSourceName" jdbcType="VARCHAR"/>
        <result column="table_name" property="tableName" jdbcType="VARCHAR"/>
        <result column="statistic_time" property="statisticTime" jdbcType="TIMESTAMP"/>
        <result column="start_time" property="startTime" jdbcType="TIMESTAMP"/>
        <result column="end_time" property="endTime" jdbcType="TIMESTAMP"/>
        <result column="increment_count" property="incrementCount" jdbcType="BIGINT"/>
        <result column="estimated_disk_size_bytes" property="estimatedDiskSizeBytes" jdbcType="BIGINT"/>
        <result column="avg_row_size_bytes" property="avgRowSizeBytes" jdbcType="BIGINT"/>
        <result column="interval_type" property="intervalType" jdbcType="VARCHAR"/>
        <result column="interval_value" property="intervalValue" jdbcType="INTEGER"/>
        <result column="created_time" property="createdTime" jdbcType="TIMESTAMP"/>
        <result column="additional_info" property="additionalInfo" jdbcType="LONGVARCHAR"/>
    </resultMap>
    
    <!-- 基础列定义 -->
    <sql id="Base_Column_List">
        id, data_source_name, table_name, statistic_time, start_time, end_time, 
        increment_count, estimated_disk_size_bytes, avg_row_size_bytes, interval_type, 
        interval_value, created_time, additional_info
    </sql>
    
    <!-- 插入记录 -->
    <insert id="insert" parameterType="com.github.starter.dbmonitor.entity.DbMonitorStatistics" 
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO db_monitor_statistics (
            data_source_name, table_name, statistic_time, start_time, end_time, 
            increment_count, estimated_disk_size_bytes, avg_row_size_bytes, 
            interval_type, interval_value, created_time, additional_info
        )
        VALUES (
            #{dataSourceName}, #{tableName}, #{statisticTime}, #{startTime}, #{endTime}, 
            #{incrementCount}, #{estimatedDiskSizeBytes}, #{avgRowSizeBytes}, 
            #{intervalType}, #{intervalValue}, #{createdTime}, #{additionalInfo}
        )
    </insert>
    
    <!-- 根据ID查询 -->
    <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM db_monitor_statistics
        WHERE id = #{id}
    </select>
    
    <!-- 更新记录 -->
    <update id="update" parameterType="com.github.starter.dbmonitor.entity.DbMonitorStatistics">
        UPDATE db_monitor_statistics
        SET 
            data_source_name = #{dataSourceName},
            table_name = #{tableName},
            statistic_time = #{statisticTime},
            start_time = #{startTime},
            end_time = #{endTime},
            increment_count = #{incrementCount},
            estimated_disk_size_bytes = #{estimatedDiskSizeBytes},
            avg_row_size_bytes = #{avgRowSizeBytes},
            interval_type = #{intervalType},
            interval_value = #{intervalValue},
            additional_info = #{additionalInfo}
        WHERE id = #{id}
    </update>
    
    <!-- 根据ID删除 -->
    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM db_monitor_statistics WHERE id = #{id}
    </delete>
    
    <!-- 复杂查询：根据数据源名称和表名查询统计记录 -->
    <select id="findByDataSourceNameAndTableNameOrderByStatisticTimeDesc" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM db_monitor_statistics
        WHERE data_source_name = #{dataSourceName}
        AND table_name = #{tableName}
        ORDER BY statistic_time DESC
    </select>
    
    <!-- 根据数据源名称查询统计记录 -->
    <select id="findByDataSourceNameOrderByStatisticTimeDesc" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM db_monitor_statistics
        WHERE data_source_name = #{dataSourceName}
        ORDER BY statistic_time DESC
    </select>
    
    <!-- 根据表名查询统计记录 -->
    <select id="findByTableNameOrderByStatisticTimeDesc" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM db_monitor_statistics
        WHERE table_name = #{tableName}
        ORDER BY statistic_time DESC
    </select>
    
    <!-- 根据时间范围查询统计记录 -->
    <select id="findByStatisticTimeBetween" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM db_monitor_statistics
        WHERE statistic_time >= #{startTime}
        AND statistic_time <= #{endTime}
        ORDER BY statistic_time DESC
    </select>
    
    <!-- 根据数据源名称、表名和时间范围查询统计记录 -->
    <select id="findByDataSourceNameAndTableNameAndStatisticTimeBetween" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM db_monitor_statistics
        WHERE data_source_name = #{dataSourceName}
        AND table_name = #{tableName}
        AND statistic_time >= #{startTime}
        AND statistic_time <= #{endTime}
        ORDER BY statistic_time DESC
    </select>
    
    <!-- 删除指定时间之前的记录 -->
    <delete id="deleteByCreatedTimeBefore">
        DELETE FROM db_monitor_statistics WHERE created_time &lt; #{cutoffTime}
    </delete>
    
    <!-- 统计指定数据源和表的最新增量数据 -->
    <select id="findLatestByDataSourceNameAndTableName" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM db_monitor_statistics
        WHERE data_source_name = #{dataSourceName}
        AND table_name = #{tableName}
        ORDER BY statistic_time DESC
        LIMIT 1
    </select>
    
    <!-- 统计所有表的最新增量数据 -->
    <select id="findLatestStatisticsByDataSourceName" resultType="java.lang.Object">
        SELECT 
            table_name as tableName,
            increment_count as incrementCount,
            statistic_time as statisticTime
        FROM db_monitor_statistics s1
        WHERE data_source_name = #{dataSourceName}
        AND statistic_time = (
            SELECT MAX(statistic_time) 
            FROM db_monitor_statistics s2 
            WHERE s2.data_source_name = s1.data_source_name 
            AND s2.table_name = s1.table_name
        )
        ORDER BY table_name
    </select>
    
    <!-- 动态条件查询 -->
    <select id="findByCondition" resultMap="BaseResultMap">
        SELECT 
        <include refid="Base_Column_List"/>
        FROM db_monitor_statistics
        <where>
            <if test="dataSourceName != null and dataSourceName != ''">
                AND data_source_name = #{dataSourceName}
            </if>
            <if test="tableName != null and tableName != ''">
                AND table_name = #{tableName}
            </if>
            <if test="startTime != null">
                AND statistic_time >= #{startTime}
            </if>
            <if test="endTime != null">
                AND statistic_time <= #{endTime}
            </if>
            <if test="intervalType != null and intervalType != ''">
                AND interval_type = #{intervalType}
            </if>
        </where>
        ORDER BY statistic_time DESC
    </select>
    
    <!-- 批量插入 -->
    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO db_monitor_statistics (
            data_source_name, table_name, statistic_time, start_time, end_time, 
            increment_count, estimated_disk_size_bytes, avg_row_size_bytes, 
            interval_type, interval_value, created_time, additional_info
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
                #{item.dataSourceName}, #{item.tableName}, #{item.statisticTime}, 
                #{item.startTime}, #{item.endTime}, #{item.incrementCount}, 
                #{item.estimatedDiskSizeBytes}, #{item.avgRowSizeBytes}, 
                #{item.intervalType}, #{item.intervalValue}, #{item.createdTime}, 
                #{item.additionalInfo}
            )
        </foreach>
    </insert>
</mapper>